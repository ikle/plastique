#!/usr/bin/perl -Ilib
#
# Fuzzer script to detect Atmel ATF1502 MC PT Mask-out configuration
#
# Copyright (c) 2025 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

use strict;
use warnings;

use Atmel::F1500::MCC;
use Atmel::F1502;

#
# PM1 -- Mask-out PT1 -- disable for OR, enable for foldback
#
# Bit at column 2, outer,  active-high	-- PM1
#
my %conf_pm1 = (
	'name'	=> 'PM1_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

#	'on'	=> ['P{n} =   (S1 # S3) $ S2;'],	# PT1 = S3
#	'off'	=> ['P{n} = !((S1 # S3) # S2);'],
);

#
# PM2 -- Mask-out PT2 -- disable for OR, enable for XNOR/Fast-In
#
# Bit at column 3, outer,  active-high	-- PM2, by default = 0
#
# NEG = 1
#
my %conf_pm2 = (
	'name'	=> 'PM2_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'on'	=> ['P{n} = S2 $ S1;'],			# PT1 = S2, PT2 = S1
	'off'	=> ['P{n} = !(S2 # S1);'],		# PT1 = S2, PT2 = S1
#	'off'	=> ['P{n} = !S2;'],			# PT1 = S2
);

#
# PM3 -- Mask-out PT3 -- disable for OR, enable for PAR
#
# Bit at column 0, outer,  active-high	-- PM3, by default = 1
#
my %conf_pm3 = (
	'name'	=> 'PM3_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'on'	=> ['P{n} = S1 # S2;'],
	'off'	=> ['P{n} = S1 # S2 # S3;'],
);

#
# PM4 -- Mask-out PT4 -- disable for OR, enable for PCK/PCE
#
# Bit at column 0, middle, active-high	-- PM4, by default = 1
#
my %conf_pm4 = (
	'name'	=> 'PM4_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'on'	=> ['P{n} = S1 # S2 # S3;'],
	'off'	=> ['P{n} = S1 # S2 # S3 # S4;'],
);

#
# PM5 -- Mask-out PT5 -- disable for OR, enable for PAR/POE
#
# Bit at column 1, outer,  active-high	-- PM5, by default = 1
#
my %conf_pm5 = (
	'name'	=> 'PM5_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'on'	=> ['P{n} = S1 # S2 # S3 # S4;'],
	'off'	=> ['P{n} = S1 # S2 # S3 # S4 # S5;'],
);

#
# XFA -- XOR-gate lower input Function
#
# Bit at column 2, middle, active-high	-- XFA
#
# PM2 = 0
# PF2 = PM2 ? PT2 : 1	= 1
# OR  = 0
# XA  = XFA ? PF2 : OR	= XFA ? 1 : 0	= XFA
# CAS = XFA ? OR  : 0	= XFA ? 0 : 0	= 0
#
my %conf_xfa = (
	'name'	=> 'XFA_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'base'	=> ['[P1..P16].ck = GCK1;'],
	'on'	=> ["P{n}.d  = 'b'1;"],			# XA = 1
	'off'	=> ["P{n}.d  = 'b'0;"],			# XA = 0
);

#
# Proposition:
#
# OR1 = PM1 ? 0 : PT1,	PF1 = PM1 ? PT1 : 1	-- foldback
# OR2 = PM2 ? 0 : PT2,	PF2 = PM2 ? PT2 : 1	-- XA
# OR3 = PM3 ? 0 : PT3,	PF3 = PM3 ? PT3 : 0	-- PTAR
# OR4 = PM4 ? 0 : PT4,	PF4 = PM4 ? PT4 : 1 	-- PTCK, PTCE
# OR5 = PM5 ? 0 : PT5,	PF5 = PM5 ? PT5 : 1	-- PTOE, PTAP
# OR6 = Cascade-in
#
# OR  = OR1 | OR2 | OR3 | OR4 | OR5 | OR6
#

my $o = f1502_load ('db');

# my $mcc_pm1 = f1502_mcc_search ($o, \%conf_pm1);
my $mcc_pm2 = f1502_mcc_search ($o, \%conf_pm2);
my $mcc_pm3 = f1502_mcc_search ($o, \%conf_pm3);
my $mcc_pm4 = f1502_mcc_search ($o, \%conf_pm4);
my $mcc_pm5 = f1502_mcc_search ($o, \%conf_pm5);
my $mcc_xfa = f1502_mcc_search ($o, \%conf_xfa);

# mcc_update ($o->{'mcc'}, $mcc_pm1) if defined $mcc_pm1;
mcc_update ($o->{'mcc'}, $mcc_pm2) if defined $mcc_pm2;
mcc_update ($o->{'mcc'}, $mcc_pm3) if defined $mcc_pm3;
mcc_update ($o->{'mcc'}, $mcc_pm4) if defined $mcc_pm4;
mcc_update ($o->{'mcc'}, $mcc_pm5) if defined $mcc_pm5;
mcc_update ($o->{'mcc'}, $mcc_xfa) if defined $mcc_xfa;

f1502_report ($o);
f1502_save   ($o, 'db');

