#!/usr/bin/perl -Ilib
#
# Fuzzer script to detect Atmel ATF1502 MC PT Enable configuration
#
# Copyright (c) 2025 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

use strict;
use warnings;

use Atmel::F1500::Fuzzer;
use Atmel::F1500::MCC;
use Atmel::F1502;

sub make_sample ($$$) {
	my ($o, $pos, $neg) = @_;
	my $path = $o->{path};
	my $dev  = $o->{dev};
	my $cols = $o->{cols};
	my $rows = $o->{rows};
	my $lab  = $o->{lab};
	my $on   = $o->{on};
	my $off  = $o->{off};

	my $test = make_base ($path, $o->{head});

	for my $i (@{$pos}) {
		my $n = 1 + $i;		# LAB A only at a moment

		print $test "P$n = $on;\n";
	}

	for my $i (@{$neg}) {
		my $n = 1 + $i;		# LAB A only at a moment

		print $test "P$n = $off;\n";
	}

	return undef unless compile ($path, $dev, '-strategy', 'Optimize', 'off');

	f1502_update ($o->{conf}, $path);

	return mcc_read_conf ($cols, $rows, $path, $lab);
}

my $o = f1502_load ('db');

#
# Nothing changed in MC config, PT2 for OR enabled by default?
#
my %conf_2 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'PE2_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'on'	=> 'S1 # S2',		# OE for positive bits
	'off'	=> 'S1',		# OE for negative bits
);

#
# One bit, column 0, outer, active-zero: PT3 disabled for OR, enabled for AR?
#
my %conf_3 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'PAR_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'on'	=> 'S1 # S2',		# OE for positive bits
	'off'	=> 'S1 # S2 # S3',	# OE for negative bits
);

#
# (PT4 disabled for OR, PT4 enabled  for PT Clock) if  PCK
# (PT4 enabled  for OR, PT4 disabled for PT Clock) if !PCK
#
my %conf_4 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> '!PCK_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'on'	=> 'S1 # S2 # S3 # S4',	# OE for positive bits
	'off'	=> 'S1 # S2 # S3',	# OE for negative bits
);

#
# fitter over optimizes...
#
my %conf_5 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'PE5_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'on'	=> 'S1 # S2 # S3 # S4 $ S5',	# OE for positive bits
	'off'	=> 'S1 # S2 # S3 # S4',		# OE for negative bits
);

#
# Core tests
#

my $mcc_3 = make_bit_map (\%conf_3);
my $mcc_4 = make_bit_map (\%conf_4);

mcc_update ($o->{'mcc'}, $mcc_3) if defined $mcc_3;
mcc_update ($o->{'mcc'}, $mcc_4) if defined $mcc_4;

f1502_report ($o);
f1502_save   ($o, 'db');

