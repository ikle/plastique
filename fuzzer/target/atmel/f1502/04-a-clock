#!/usr/bin/perl -Ilib
#
# Fuzzer script to detect Atmel ATF1502 MC Clock configuration
#
# Copyright (c) 2025 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

use strict;
use warnings;

use Atmel::F1500::Fuzzer;
use Atmel::F1500::MCC;
use Atmel::F1502;

sub make_sample ($$$) {
	my ($o, $pos, $neg) = @_;
	my $path = $o->{path};
	my $dev  = $o->{dev};
	my $cols = $o->{cols};
	my $rows = $o->{rows};
	my $lab  = $o->{lab};
	my $off  = $o->{off};
	my $on   = $o->{on};

	my $test = make_base ($path, $o->{head});

	# CE used to guarantee what Clock PT always enabled

	for my $i (@{$pos}) {
		my $n = 1 + $i;		# LAB A only at a moment

		print $test "P$n.ck = $on;\n";
		print $test "P$n.ce = PTCK;\n" if $on ne 'PTCK';
	}

	for my $i (@{$neg}) {
		my $n = 1 + $i;		# LAB A only at a moment

		print $test "P$n.ck = $off;\n";
		print $test "P$n.ce = PTCK;\n" if $off ne 'PTCK';
	}

	return undef unless compile ($path, $dev);

	f1502_update ($o->{conf}, $path);

	return mcc_read_conf ($cols, $rows, $path, $lab);
}

my $o = f1502_load ('db');

my %conf_0 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'CK0_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'off'	=> 'GCK2',		# clock for negative bits
	'on'	=> 'GCK3',		# clock for positive bits
);

my %conf_1 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'CK1_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'off'	=> 'GCK1',		# clock for negative bits
	'on'	=> 'GCK3',		# clock for positive bits
);

my %conf_2 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'CK2_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'off'	=> 'GCK2',		# clock for negative bits
	'on'	=> 'GCK1',		# clock for positive bits
);

# if x.ck == PTCK then x.ce = 1 else x.ce = PTCK  =>  x.ce = PTCK | CE

my %conf_3 = (
	'cb'	=> \&make_sample,	# sample table generator	(req)
	'name'	=> 'CE_',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'lab'	=> 'A',			# LAB name to test
	'conf'	=> $o,			# configuration database

	'off'	=> 'GCK2',		# clock for negative bits
	'on'	=> 'PTCK',		# clock for positive bits
);

#
# Tests:
#
# 0. GCK1 -- (CK1, CK0) = (0, x)
#    GCK3 -- (CK1, CK0) = (1, x)
#
# 1. GCK2 -- (CK1, CK0) = (y, 0)
#    GCK3 -- (CK1, CK0) = (y, 1)
#
# 2. GCK1 -- (CK1, CK0) = (0, 1)
#    GCK2 -- (CK1, CK0) = (1, 0)
#
# 3. GCK1 -- (CK1, CK0) = (0, 1)
#    PTCK -- (CK1, CK0) = (1, 0)		-- same as for GCK2
#
#    GCK2 -- (CK1, CK0) = (a, b)  =  (1, 0)
#    PTCK -- (CK1, CK0) = (a, b)  =  (1, 0)	-- same as for GCK2
#
#    GCK3 -- (CK1, CK0) = (c, 1)  =  (1, 1)
#    PTCK -- (CK1, CK0) = (c, 0)  =  (1, 0)	-- same as for GCK2
#
# Solution:
#
#    x = 1, y = 1
#
#     ?   -- (CK1, CK0) = (0, 0)	-- GND (or Vcc)?
#    GCK1 -- (CK1, CK0) = (0, 1)
#    GCK2 -- (CK1, CK0) = (1, 0)	-- PTCK or GCK2
#    GCK3 -- (CK1, CK0) = (1, 1)
#
# Proposed expressions:
#
#    ck = CK1 ? (CK0 ? GCK3 : (CE ? PTCK : GCK2)) :
#               (CK0 ? GCK1 : GND               )
#
#    ce = CE | PTCK		-- assume PTCK = 1 if PT Clock not used
#

my $mcc_0 = make_bit_map (\%conf_0);
my $mcc_1 = make_bit_map (\%conf_1);
my $mcc_3 = make_bit_map (\%conf_3);

mcc_update ($o->{'mcc'}, $mcc_0) if defined $mcc_0;
mcc_update ($o->{'mcc'}, $mcc_1) if defined $mcc_1;
mcc_update ($o->{'mcc'}, $mcc_3) if defined $mcc_3;

f1502_report ($o);
f1502_save   ($o, 'db');

