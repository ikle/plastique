#!/usr/bin/perl -Ilib
#
# Fuzzer script to detect Atmel ATF1502 MC Clock configuration
#
# Copyright (c) 2025 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

use strict;
use warnings;

use Atmel::F1500::MCC;
use Atmel::F1502;

#
# Note, CE used to guarantee what Clock PT always enabled
#
# Bit at column 6, middle, active-high	-- CK0
#
my %conf_0 = (
	'name'	=> 'CK0_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'pins'	=> 'C44-clock',
	'base'	=> ['[P1..P16].d  = [OE1,P18..P32];', 'PTCK = OE1 & P18;'],
	'on'	=> ['P{n}.ck = GCK3;', 'P{n}.ce = PTCK;'],
	'off'	=> ['P{n}.ck = GCK2;', 'P{n}.ce = PTCK;'],
);

#
# Bit at column 6, outer,  active-low	-- CK1
#
my %conf_1 = (
	'name'	=> 'CK1_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'pins'	=> 'C44-clock',
	'base'	=> ['[P1..P16].d  = [OE1,P18..P32];', 'PTCK = OE1 & P18;'],
	'on'	=> ['P{n}.ck = GCK3;', 'P{n}.ce = PTCK;'],
	'off'	=> ['P{n}.ck = GCK1;', 'P{n}.ce = PTCK;'],
);
#
# Bit at column 6, outer,  active-high	-- !CK1
# Bit at column 6, middle, active-high	-- CK0
#
my %conf_2 = (
	'name'	=> 'CK2_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'pins'	=> 'C44-clock',
	'base'	=> ['[P1..P16].d  = [OE1,P18..P32];', 'PTCK = OE1 & P18;'],
	'on'	=> ['P{n}.ck = GCK1;', 'P{n}.ce = PTCK;'],
	'off'	=> ['P{n}.ck = GCK2;', 'P{n}.ce = PTCK;'],
);

#
# Bit at column 7, middle, active-high	-- CE
#
# if x.ck == PTCK then x.ce = 1 else x.ce = PTCK  =>  x.ce = PTCK | CE
#
my %conf_3 = (
	'name'	=> 'CE_',		# prefix name of source bits	(req)
	'lab'	=> 'A',			# LAB name to test

	'pins'	=> 'C44-clock',
	'base'	=> ['[P1..P16].d  = [OE1,P18..P32];', 'PTCK = OE1 & P18;'],
	'on'	=> ['P{n}.ck = PTCK;'],
	'off'	=> ['P{n}.ck = GCK2;', 'P{n}.ce = PTCK;'],
);

#
# Tests:
#
# 0. GCK2 -- (CK1, CK0) = (y, 0)
#    GCK3 -- (CK1, CK0) = (y, 1)
#
# 1. GCK1 -- (CK1, CK0) = (0, x)
#    GCK3 -- (CK1, CK0) = (1, x)
#
# 2. GCK1 -- (CK1, CK0) = (0, 1)
#    GCK2 -- (CK1, CK0) = (1, 0)
#
# 3. GCK1 -- (CK1, CK0) = (0, 1)
#    PTCK -- (CK1, CK0) = (1, 0)		-- same as for GCK2
#
#    GCK2 -- (CK1, CK0) = (a, b)  =  (1, 0)
#    PTCK -- (CK1, CK0) = (a, b)  =  (1, 0)	-- same as for GCK2
#
#    GCK3 -- (CK1, CK0) = (c, 1)  =  (1, 1)
#    PTCK -- (CK1, CK0) = (c, 0)  =  (1, 0)	-- same as for GCK2
#
# Solution:
#
#    x = 1, y = 1
#
#     ?   -- (CK1, CK0) = (0, 0)	-- GND (or Vcc)?
#    GCK1 -- (CK1, CK0) = (0, 1)
#    GCK2 -- (CK1, CK0) = (1, 0)	-- PTCK or GCK2
#    GCK3 -- (CK1, CK0) = (1, 1)
#
# Proposed expressions:
#
#    ck = CK1 ? (CK0 ? GCK3 : (CE ? PTCK : GCK2)) :
#               (CK0 ? GCK1 : GND               )
#
#    ce = CE | PTCK		-- assume PTCK = 1 if PT Clock not used
#

my $o = f1502_load ('db');

my $mcc_0 = f1502_mcc_search ($o, \%conf_0);
my $mcc_1 = f1502_mcc_search ($o, \%conf_1);
my $mcc_3 = f1502_mcc_search ($o, \%conf_3);

mcc_update ($o->{'mcc'}, $mcc_0) if defined $mcc_0;
mcc_update ($o->{'mcc'}, $mcc_1) if defined $mcc_1;
mcc_update ($o->{'mcc'}, $mcc_3) if defined $mcc_3;

f1502_report ($o);
f1502_save   ($o, 'db');

