#!/usr/bin/perl -Ilib
#
# Fuzzer script to detect Atmel ATF1502 Pin Keeper configuration
#
# Copyright (c) 2025 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

use strict;
use warnings;

use File::Basename	qw (dirname);
use File::Copy		qw (copy);
use File::Path		qw (mkpath);

use Atmel::F1500::MCC;
use Atmel::F1502;
use MAP::Fuzzer;

sub make_opt_sample ($$$$) {
	my ($o, $path, $index, $invert) = @_;

	mkpath (dirname ($path));
	copy ($o->{head}, "$path.pld") or die "E: Cannot copy base\n";

	open my $test, '>>', "$path.pld" or die "E: Cannot open test file\n";

	my $count = $o->{count};
	my $lab   = $o->{lab};
	my $dev   = $o->{dev};
	my $opt   = $o->{opt};

	my $base  = (ord ($lab) - ord ('A')) * $count + 1;
	my $mask  = (1 << $index);
	my @a;

	for (my $i = 0; $i < $count; ++$i) {
		my $n = $base + $i;

		push (@a, "P$n") if (($i & $mask) != 0 xor $invert);
	}

	return compile ($path, $dev, '-strategy', $opt, '=', 'off') if scalar @a == 0;
	return compile ($path, $dev, '-strategy', $opt, '=', @a);
}

sub pin_opt_sample ($$$) {
	my ($o, $index, $invert) = @_;
	my $path = $o->{path};
	my $cols = $o->{cols};
	my $rows = $o->{rows};
	my $lab  = $o->{lab};

	return undef unless make_opt_sample ($o, $path, $index, $invert);
	return mcc_read_conf ($cols, $rows, $path, $lab);
}

my %conf = (
	'cb'	=> \&pin_opt_sample,	# sample table generator	(req)
	'name'	=> 'FAST',		# prefix name of source bits	(req)
	'cols'	=> 12,			# output table column count	(req)
	'rows'	=> 32,			# output table row count	(req)
	'count'	=> 16,			# number of source bits		(req)
	'order'	=> 5,			# ceil (log2 (count - 1)) + 1	(req)

	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
	'opt'	=> 'output_fast',	# fitter option
	'lab'	=> 'A',			# LAB name to test
);

my $o   = f1502_load ('db');
my $mcc = make_bit_map (\%conf);

mcc_update ($o->{'mcc'}, $mcc) if defined $mcc;

f1502_report ($o);
f1502_save   ($o, 'db');

