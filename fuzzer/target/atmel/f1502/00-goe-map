#!/usr/bin/perl -Ilib
#
# Fuzzer script to detect Atmel ATF1502 GOE map configuration
#
# Copyright (c) 2025 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

use strict;
use warnings;

use Atmel::F1500::Fuzzer;
use Atmel::F1500::OEC;
use Atmel::F1502;

my %conf = (
	'path'	=> 'work/test',		# test files prefix
	'head'	=> "$0-base.pld",	# PLD file base part
	'dev'	=> 'P1502C44',		# target device for fitter
);

sub make_fb_sample ($$$$$) {
	my ($o, $c, $d, $s, $node) = @_;
	my $path = $c->{path};
	my $test = make_base ($path, $c->{head});

	my ($ds, $de, $ss, $se) = ($d, $d + 1, $s, $s + 1);

	print $test "GOE = P19 & !P20;\n";
	print $test "[P$ds..P$de]    = [P$ss..P$se].io;\n";
	print $test "[P$ds..P$de].oe = GOE;\n";

	my @opts = (
		'-strategy', 'Optimize', 'off',
		'-strategy', 'Global_OE', '=', "P$ds", "P$de",
		'-strategy', 'OE_node', '=', $node
	);

	return unless compile ($path, $c->{dev}, @opts);

	oec_update ($o->{oec}, $path, oec_read_jed (5, $path));
	oec_report ($o->{oec}, "# GOE Mapping\n\n", "\n");
}

sub make_pin_sample ($$$$$) {
	my ($o, $c, $d, $s, $pin) = @_;
	my $path = $c->{path};
	my $test = make_base ($path, $c->{head});

	my ($ds, $de, $ss, $se) = ($d, $d + 1, $s, $s + 1);

	print $test "[P$ds..P$de]    = [P$ss..P$se].io;\n";
	print $test "[P$ds..P$de].oe = $pin;\n";

	my @opts = ('-strategy', 'Optimize', 'off');

	return unless compile ($path, $c->{dev}, @opts);

	oec_update ($o->{oec}, $path, oec_read_jed (5, $path));
	oec_report ($o->{oec}, "# GOE Mapping\n\n", "\n");
}

my $o = f1502_load ('db');

for (my $i = 0; $i < 16; ++$i) {
	make_fb_sample ($o, \%conf, 2, 17, 601 + $i);
	make_fb_sample ($o, \%conf, 18, 1, 617 + $i);

	make_pin_sample ($o, \%conf, 17, 19, 'P' . ($i + 1));
	make_pin_sample ($o, \%conf,  1,  3, 'P' . ($i + 16));
}

for my $pin ('OE1', 'GCK1', 'GCLR', 'OE2') {
	make_pin_sample ($o, \%conf, 1, 3, $pin);
}

f1502_report ($o);
f1502_save   ($o, 'db');

